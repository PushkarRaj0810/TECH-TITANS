// server/src/models/Issue.ts

import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, ManyToOne, OneToMany, Index } from "typeorm";
import type { Point } from "geojson";
import { User } from "./User";
import { StatusLog } from "./StatusLog";
import { Flag } from "./Flag";

export type Category = 
  | "roads" 
  | "lighting" 
  | "water" 
  | "cleanliness" 
  | "safety" 
  | "obstructions";

export type Status = "reported" | "in_progress" | "resolved" | "hidden";

@Entity("issues")
export class Issue {
  @PrimaryGeneratedColumn("uuid")
  id!: string;

  @Column({ length: 200 })
  title!: string;

  @Column("text")
  description!: string;

  @Column({ type: "varchar", length: 20 })
  category!: Category;

  @Column("text", { array: true, default: [] })
  photoUrls!: string[];

  @Index({ spatial: true })
  @Column({
    type: "geography",
    spatialFeatureType: "Point",
    srid: 4326,
    nullable: false,
  })
  location!: Point;  // Save as GeoJSON Point { type: "Point", coordinates: [lng, lat] }

  @Column({
    type: "enum",
    enum: ["reported", "in_progress", "resolved", "hidden"],
    default: "reported",
  })
  status!: Status;

  @ManyToOne(() => User, (u) => u.reportedIssues, { nullable: true })
  reporter?: User;

  @OneToMany(() => StatusLog, (log) => log.issue)
  statusLog!: StatusLog[];

  @OneToMany(() => Flag, (flag) => flag.issue)
  flags!: Flag[];

  @CreateDateColumn({ type: "timestamptz" })
  createdAt!: Date;

  @UpdateDateColumn({ type: "timestamptz" })
  updatedAt!: Date;
}
